import os
import random
import asyncio
import logging
import sqlite3
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from dotenv import load_dotenv, find_dotenv


logging.basicConfig(level=logging.INFO)
load_dotenv(find_dotenv())

bot = Bot(token=os.environ.get('BOT_TOKEN'))
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

conn = sqlite3.connect('data.db')
cursor = conn.cursor()
cursor.execute('CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, drug_count INTEGER, last_use_time TEXT, is_admin INTEGER, is_banned INTEGER, last_casino TEXT, last_find TEXT)')
conn.commit()


@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    keyboard = types.InlineKeyboardMarkup(resize_keyboard=True)
    channel_button = InlineKeyboardButton('üì¢ –ö–∞–Ω–∞–ª', url='https://t.me/mefmetrch')
    donate_button = InlineKeyboardButton('üí∞ –î–æ–Ω–∞—Ç', url='https://t.me/mefmetrch')
    chat_button = InlineKeyboardButton('üí¨ –ß–∞—Ç', url='https://t.me/mefmetrchat')
    keyboard.row(channel_button, donate_button, chat_button)
    await message.reply("üëã *–ó–¥–∞—Ä–æ–≤–∞ —à–Ω—ã—Ä*, —ç—Ç–æ—Ç –±–æ—Ç —Å–¥–µ–ª–∞–Ω –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã *—Å—á–∏—Ç–∞—Ç—å* —Å–∫–æ–ª—å–∫–æ *–≥—Ä–∞–º–º –º–µ—Ñ–µ–¥—Ä–æ–Ω—á–∏–∫–∞* —Ç—ã –º–æ–∂–µ—à—å —Å–Ω—é—Ö–∞—Ç—å\nüßë‚Äçüíª –ë–æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω *@xanaxnotforfree* –∏ *@cl0wnl3ss*", reply_markup=keyboard, parse_mode='markdown')

@dp.message_handler(commands=['help'])
async def help_command(message: types.Message):
    await message.reply('–í—Å–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n\n`/drug` - *–ø—Ä–∏–Ω—è—Ç—å –º–µ—Ñ–∏–∫*\n`/top` - *—Ç–æ–ø —Ç–æ—Ä—á–µ–π –º–∏—Ä–∞*\n`/take` - *—Å–ø–∏–∑–¥–∏—Ç—å –º–µ—Ñ–∏–∫ —É –±–ª–∏–∂–Ω–µ–≥–æ*\n`/give` - *–ø–æ–¥–µ–ª–∏—Ç—å—Å—è –º–µ—Ñ–∏–∫–æ–º*\n`/casino` - *All-in, –≤—Å—ë –∏–ª–∏ –Ω–∏—á–µ–≥–æ*\n`/find` - *—Å—Ö–æ–¥–∏—Ç—å –∑–∞ –∫–ª–∞–¥–æ–º*\n`/about` - *—É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –±–æ—Ç–µ*', parse_mode='markdown')


@dp.message_handler(Command('profile'))
async def profile_command(message: types.Message):
    user_id = message.from_user.id
    cursor.execute('SELECT * FROM users WHERE id = ?', (user_id,))
    user = cursor.fetchone()
    is_admin = user[3]

    if user:
        drug_count = user[1]
        is_admin = user[3]
        if is_admin == 1:
            await message.reply(f"üëë *–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞*\nüë§ *–ò–º—è:* _{message.from_user.first_name}_\nüë• *–í–∞—à username:* _@{message.from_user.username}_\nüåø *–°–Ω—é—Ö–∞–Ω–æ* _{drug_count}_ –≥—Ä–∞–º–º.", parse_mode='markdown')
        else:
            await message.reply(f"üë§ *–ò–º—è:* _{message.from_user.first_name}_\nüë• *–í–∞—à username:* _@{message.from_user.username}_\nüåø *–°–Ω—é—Ö–∞–Ω–æ* _{drug_count}_ –≥—Ä–∞–º–º.", parse_mode='markdown')
    else:
        await message.reply('‚ùå –í—ã –µ—â–µ –Ω–µ –Ω—é—Ö–∞–ª–∏ –º–µ—Ñ—á–∏–∫')

@dp.message_handler(Command('drug'))
async def drug_command(message: types.Message, state: FSMContext):
    format = '%Y-%m-%d %H:%M:%S.%f'
    user_id = message.from_user.id
    cursor.execute('SELECT * FROM users WHERE id = ?', (user_id,))
    user = cursor.fetchone()
    drug_count = user[1] if user else 0
    last_use_time = user[2] if user else 0
    is_admin = user[3] if user else 0
    is_banned = user[4] if user else 0
    use_time = datetime.strptime(last_use_time, format) if user else 0
    if is_banned == 1:
        await message.reply('üõë –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!')
    else:
        if last_use_time and (datetime.now() - use_time) < timedelta(hours=1):
            remaining_time = timedelta(hours=1) - (datetime.now() - use_time)
            await message.reply(f"‚ùå *{message.from_user.first_name}*, _—Ç—ã —É–∂–µ –Ω—é—Ö–∞–ª(-–∞)!_\n\nüåø –í—Å–µ–≥–æ —Å–Ω—é—Ö–∞–Ω–æ `{drug_count} –≥—Ä–∞–º–º` –º–µ—Ñ–µ–¥—Ä–æ–Ω–∞\n\n‚è≥ –°–ª–µ–¥—É—é—â–∏–π –∑–∞–Ω—é—Ö –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ `1 —á–∞—Å.`", parse_mode='markdown')
        
        elif random.randint(0,100) < 20:
            await message.reply(f"üßÇ *{message.from_user.first_name}*, _—Ç—ã –ø—Ä–æ—Å—ã–ø–∞–ª(-–∞) –≤–µ—Å—å –º–µ—Ñ—á–∏–∫!_\n\nüåø –í—Å–µ–≥–æ —Å–Ω—é—Ö–∞–Ω–æ `{drug_count}` –≥—Ä–∞–º–º –º–µ—Ñ–µ–¥—Ä–æ–Ω–∞\n\n‚è≥ –°–ª–µ–¥—É—é—â–∏–π –∑–∞–Ω—é—Ö –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ `1 —á–∞—Å.`", parse_mode='markdown')
            await state.set_data({'time': datetime.now()})
        else:
            count = random.randint(1, 10)
            if user:
                cursor.execute('UPDATE users SET drug_count = drug_count + ? WHERE id = ?', (count, user_id))
            else:
                cursor.execute('INSERT INTO users (id, drug_count, is_admin, is_banned) VALUES (?, ?, 0, 0)', (user_id, count))
            cursor.execute('UPDATE users SET last_use_time = ? WHERE id = ?', (datetime.now(), user_id))
            conn.commit()
            await message.reply(f"üëç *{message.from_user.first_name}*, _—Ç—ã –∑–∞–Ω—é—Ö–Ω—É–ª(-–∞) {count} –≥—Ä–∞–º–º –º–µ—Ñ—á–∏–∫–∞!_\n\nüåø –í—Å–µ–≥–æ —Å–Ω—é—Ö–∞–Ω–æ `{drug_count+count}` –≥—Ä–∞–º–º –º–µ—Ñ–µ–¥—Ä–æ–Ω–∞\n\n‚è≥ –°–ª–µ–¥—É—é—â–∏–π –∑–∞–Ω—é—Ö –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ `1 —á–∞—Å.`", parse_mode='markdown')
  
@dp.message_handler(commands=['top'])
async def top_command(message: types.Message):
    user_id = message.from_user.id
    cursor.execute('SELECT * FROM users WHERE id = ?', (user_id,))
    user = cursor.fetchone()
    is_banned = user[4] if user else 0
    if is_banned == 1:
        await message.reply('üõë –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!')
    else:
        cursor.execute('SELECT id, drug_count FROM users ORDER BY drug_count DESC LIMIT 10')
        top_users = cursor.fetchall()
        if top_users:
            response = "üîù–¢–û–ü 10 –õ–Æ–¢–´–• –ú–ï–§–ï–ù–î–†–û–ù–©–ò–ö–û–í –í –ú–ò–†–ïüîù:\n"
            counter = 1
            for user in top_users:
                user_id = user[0]
                drug_count = user[1]
                user_info = await bot.get_chat(user_id)
                response += f"{counter}) *{user_info.full_name}*: `{drug_count} –≥—Ä–∞–º–º –º–µ—Ñ–µ–¥—Ä–æ–Ω–∞`\n"
                counter += 1
            await message.reply(response, parse_mode='markdown')
        else:
            await message.reply('–ù–∏–∫—Ç–æ –µ—â–µ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–ª –º–µ—Ñ.')


@dp.message_handler(commands=['take'])
async def take_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    cursor.execute('SELECT * FROM users WHERE id = ?', (user_id,))
    user = cursor.fetchone()
    is_banned = user[4] if user else 0
    if is_banned == 1:
        await message.reply('üõë –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!')
    else:
        reply_msg = message.reply_to_message
        if reply_msg and reply_msg.from_user.id != message.from_user.id:
            user_id = reply_msg.from_user.id
            cursor.execute('SELECT * FROM users WHERE id = ?', (user_id,))
            user = cursor.fetchone()
            your_user_id = message.from_user.id
            cursor.execute('SELECT * FROM users WHERE id = ?', (your_user_id,))
            your_user = cursor.fetchone()

            if user and your_user:
                drug_count = user[1]
                if drug_count > 1:
                    last_time = await state.get_data()
                    if last_time and (datetime.now() - last_time['time']) < timedelta(days=1):
                        remaining_time = timedelta(days=1) - (datetime.now() - last_time['time'])
                        await message.reply(f"‚ùå –ù–µ–ª—å–∑—è –ø–∏–∑–¥–∏—Ç—å –º–µ—Ñ —Ç–∞–∫ —á–∞—Å—Ç–æ! –¢—ã —Å–º–æ–∂–µ—à—å —Å–ø–∏–∑–¥–∏—Ç—å –º–µ—Ñ —á–µ—Ä–µ–∑ 1 –¥–µ–Ω—å.")
                    else:
                        variables = ['zametil', 'otpor', 'pass']
                        randomed = random.choice(variables)
                        if randomed == 'zametil':
                            cursor.execute('UPDATE users SET drug_count = drug_count - 1 WHERE id = ?', (your_user_id,))
                            conn.commit()
                            await message.reply('‚ùå *–ñ–µ—Ä—Ç–≤–∞ —Ç–µ–±—è –∑–∞–º–µ—Ç–∏–ª–∞*, –∏ —Ç—ã —Ä–µ—à–∏–ª —É–±–µ–∂–∞—Ç—å. –°–ø–∏–∑–¥–∏—Ç—å –º–µ—Ñ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å. –ü–æ–∫–∞ —Ç—ã –±–µ–∂–∞–ª, *—Ç—ã –ø–æ—Ç–µ—Ä—è–ª* `1 –≥—Ä.`', parse_mode='markdown')
                        elif randomed == 'otpor':
                            cursor.execute('UPDATE users SET drug_count = drug_count - 1 WHERE id = ?', (your_user_id,))
                            cursor.execute('UPDATE users SET drug_count = drug_count + 1 WHERE id = ?', (user_id,))
                            conn.commit()
                            await message.reply('‚ùå *–ñ–µ—Ä—Ç–≤–∞ —Ç–µ–±—è –∑–∞–º–µ—Ç–∏–ª–∞*, –∏ –ø–∏–∑–¥–∞–Ω—É–ª–∞ —Ç–µ–±–µ –±—É—Ç—ã–ª–∫–æ–π –ø–æ –±–∞—à–∫–µ –±–ª—è. –°–ø–∏–∑–¥–∏—Ç—å –º–µ—Ñ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å. *–ñ–µ—Ä—Ç–≤–∞ –¥–æ—Å—Ç–∞–ª–∞ –∏–∑ —Ç–≤–æ–µ–≥–æ –∫–∞—Ä–º–∞–Ω–∞* `1 –≥—Ä.`', parse_mode='markdown')
                            
                        elif randomed == 'pass':
                            cursor.execute('UPDATE users SET drug_count = drug_count - 1 WHERE id = ?', (user_id,))
                            cursor.execute('UPDATE users SET drug_count = drug_count + 1 WHERE id = ?', (your_user_id,))
                            conn.commit()
                            await message.reply(f"‚úÖ [{message.from_user.first_name}](tg://user?id={message.from_user.id}) _—Å–ø–∏–∑–¥–∏–ª(-–∞) –æ–¥–∏–Ω –≥—Ä–∞–º –º–µ—Ñ–∞ —É_ *@{reply_msg.from_user.username}*!", parse_mode='markdown')
                        await state.set_data({'time': datetime.now()})
                elif drug_count < 1:
                    await message.reply('‚ùå –£ –∂–µ—Ä—Ç–≤—ã –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–Ω—é—Ö–∞–Ω–Ω–æ–≥–æ –º–µ—Ñ–∞ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –µ–≥–æ —Å–ø–∏–∑–¥–∏—Ç—å')
            else:
                await message.reply('‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –Ω—é—Ö–∞–ª –º–µ—Ñ')
        else:
            await message.reply('‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–ø–∏–∑–¥–∏—Ç—å –º–µ—Ñ–µ–¥—Ä–æ–Ω.')

@dp.message_handler(commands=['casino'])
async def casino(message: types.Message):
    user_id = message.from_user.id
    cursor.execute('SELECT * FROM users WHERE id = ?', (user_id,))
    user = cursor.fetchone()
    drug_count = user[1]
    last_used = user[5]
    if drug_count < 20:
        await message.reply(f"üõë –î–ª—è –∏–≥—Ä—ã –≤ –∫–∞–∑–∏–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–º–µ–µ—Ç—å –±–æ–ª—å—à–µ *20-—Ç–∏ —Å–Ω—é—Ö–∞–Ω–Ω—ã—Ö –≥—Ä–∞–º–º*", parse_mode='markdown')
    else:
        if last_used is not None and (datetime.now() - datetime.fromisoformat(last_used)).total_seconds() < 3600:
            await message.reply('‚è≥ –¢—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ *–∫—Ä—É—Ç–∏–ª –∫–∞–∑–∏–∫*, —Å–æ–ª–µ–≤–∞—è –æ–±–µ–∑—å—è–Ω–∞, *–ø–æ–¥–æ–∂–¥–∏ –æ–¥–∏–Ω —á–∞—Å –ø–æ –±—Ä–∞—Ç—Å–∫–∏.*', parse_mode='markdown')
            return
        randomed = random.randint(1,100)
        multipliers = [5, 2.5, 2, 1.5, 0]
        weights = [1, 2, 3, 4, 5]
        multiplier = random.choices(multipliers, weights, k=1)[0]
        if multiplier > 0:
            drug_count *= multiplier
            cursor.execute('UPDATE users SET drug_count = ? WHERE id = ?', (drug_count, user_id,))
            conn.commit()
            await bot.send_message(-1001659076963, f"#CASINO\n\nfirst\_name: `{message.from_user.first_name}`\nuserid: `{user_id}`\nmultiplier: `{multiplier}`\ndrug\_count: `{drug_count}`\n\n[mention](tg://user?id={user_id})", parse_mode='markdown')
            await message.reply(f'ü§ë *–ï–±–∞—Ç—å —Ç–µ–±–µ –ø–æ–≤–µ–∑–ª–æ!* –¢–≤–æ–µ –∫–æ–ª-–≤–æ —Å–Ω—é—Ö–∞–Ω–Ω—ã—Ö –≥—Ä–∞–º–º *—É–º–Ω–æ–∂–∏–ª–æ—Å—å* –Ω–∞ `{multiplier}` –∏ —Ç–µ–ø–µ—Ä—å —Ä–∞–≤–Ω–æ `{drug_count}`.', parse_mode='markdown')
           
        elif multiplier == 0:
            drug_count = 0
            cursor.execute('UPDATE users SET last_casino = ? WHERE id = ?', (datetime.now().isoformat(), user_id,))
            cursor.execute('UPDATE users SET drug_count = ? WHERE id = ?', (drug_count, user_id,))
            conn.commit()
            await bot.send_message(-1001659076963, f"#CASINO\n\nfirst\_name: `{message.from_user.first_name}`\nuserid: `{user_id}`\nmultiplier: `{multiplier}`\ndrug\_count: `{drug_count}`\n\n[mention](tg://user?id={user_id})", parse_mode='markdown')
            await message.reply('üòî *–¢—ã –ø—Ä–æ–µ–±–∞–ª* –≤–µ—Å—å —Å–≤–æ–π –º–µ—Ñ—á–∏–∫, *–Ω–µ—Ö—É–π –±—ã–ª–æ* –∫—Ä—É—Ç–∏—Ç—å –∫–∞–∑–∏–∫.', parse_mode='markdown')


@dp.message_handler(commands=['give'])
async def give_command(message: types.Message, state: FSMContext):

    user_id = message.from_user.id
    cursor.execute('SELECT * FROM users WHERE id = ?', (user_id,))
    user = cursor.fetchone()
    is_banned = user[4] if user else 0
    if is_banned == 1:
        await message.reply('üõë –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–æ—Ç–µ!')
    else:
        args = message.get_args().split(maxsplit=1)
        if args:
            value = int(args[0])
            reply_msg = message.reply_to_message
            if reply_msg and reply_msg.from_user.id != message.from_user.id:
                user_id = reply_msg.from_user.id
                cursor.execute('SELECT * FROM users WHERE id = ?', (user_id,))
                user = cursor.fetchone()
                your_user_id = message.from_user.id
                cursor.execute('SELECT * FROM users WHERE id = ?', (your_user_id,))
                your_user = cursor.fetchone()

                if user and your_user:
                    drug_count = your_user[1]
                    last_time = await state.get_data()
                    if last_time and (datetime.now() - last_time['time']) < timedelta(days=1):
                        remaining_time = timedelta(days=1) - (datetime.now() - last_time['time'])
                        await message.reply(f"‚ùå –ù–µ–ª—å–∑—è –¥–µ–ª–∏—Ç—å—Å—è –º–µ—Ñ–æ–º —Ç–∞–∫ —á–∞—Å—Ç–æ! –¢—ã —Å–º–æ–∂–µ—à—å –ø–æ–¥–∞—Ä–∏—Ç—å –º–µ—Ñ —á–µ—Ä–µ–∑ 1 –¥–µ–Ω—å.")
                    else:
                        if drug_count >= value:
                            cursor.execute('UPDATE users SET drug_count = drug_count + ? WHERE id = ?', (value,user_id))
                            cursor.execute('UPDATE users SET drug_count = drug_count - ? WHERE id = ?', (value,your_user_id))
                            conn.commit()
                            await bot.send_message(-1001659076963, f"#GIVE\n\nfirst\_name: `{message.from_user.first_name}`\nuserid: `{user_id}`\nto: `{reply_msg.from_user.first_name}`\nvalue: `{value}`\nmention: @{reply_msg.from_user.username}", parse_mode='markdown')
                            await message.reply(f"‚úÖ [{message.from_user.first_name}](tg://user?id={message.from_user.id}) _–ø–æ–¥–∞—Ä–∏–ª(-–∞) {value} –≥—Ä. –º–µ—Ñ–∞ _ *@{reply_msg.from_user.username}*!", parse_mode='markdown')
                            await state.set_data({'time': datetime.now()})
                        elif drug_count < value:
                            await message.reply(f'‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥—Ä–∞–º–º–æ–≤ –º–µ—Ñ–∞ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –∏—Ö –ø–µ—Ä–µ–¥–∞—Ç—å')
                else:
                    await message.reply('‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –Ω—é—Ö–∞–ª –º–µ—Ñ')
            else:
                await message.reply('‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –¥–∞—Ç—å –º–µ—Ñ–µ–¥—Ä–æ–Ω–∞.')
        else:
            await message.reply('‚ùå –£–∫–∞–∂–∏ —Å–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º —Ö–æ—á–µ—à—å –ø–æ–¥–∞—Ä–∏—Ç—å\n–ü—Ä–∏–º–µ—Ä:\n`/give 20`', parse_mode='markdown')

@dp.message_handler(commands=['find'])
async def drug_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    cursor.execute('SELECT * FROM users WHERE id = ?', (user_id,))
    user = cursor.fetchone()
    drug_count = user[1] if user else 0
    last_time = await state.get_data()
    last_used = user[6]
    if last_used is not None and (datetime.now() - datetime.fromisoformat(last_used)).total_seconds() < 43200:
        await message.reply('‚è≥ –¢—ã –Ω–µ–¥–∞–≤–Ω–æ *—Ö–æ–¥–∏–ª –∑–∞ –∫–ª–∞–¥–æ–º*, *–ø–æ–¥–æ–∂–¥–∏ 12 —á–∞—Å–æ–≤.*', parse_mode='markdown')
        return
    else:
        if random.randint(1,100) > 50:
            count = random.randint(1, 10)
            if user:
                cursor.execute('UPDATE users SET drug_count = ? WHERE id = ?', (drug_count + count, user_id))
            else:
                cursor.execute('INSERT INTO users (id, drug_count) VALUES (?, ?)', (user_id, count))
            cursor.execute('UPDATE users SET last_use_time = ? WHERE id = ?', ('2006-02-20 12:45:37.666666', user_id,))
            cursor.execute('UPDATE users SET last_find = ? WHERE id = ?', (datetime.now().isoformat(), user_id,))
            conn.commit()
            await bot.send_message(-1001659076963, f"#FIND #WIN\n\nfirst\_name: `{message.from_user.first_name}`\ncount: `{count}`\ndrug\_count: `{drug_count+count}`\n\n[mention](tg://user?id={user_id})", parse_mode='markdown')
            await message.reply(f"üëç {message.from_user.first_name}, —Ç—ã –ø–æ—à—ë–ª –≤ –ª–µ—Å –∏ *–Ω–∞—à–µ–ª –∫–ª–∞–¥*, —Ç–∞–º –ª–µ–∂–∞–ª–æ `{count} –≥—Ä.` –º–µ—Ñ—á–∏–∫–∞!\nüåø –¢–≤–æ–µ –≤—Ä–µ–º—è –∫–æ–º–∞–Ω–¥—ã /drug –æ–±–Ω–æ–≤–ª–µ–Ω–æ", parse_mode='markdown')
        elif random.randint(1,100) <= 50:
            count = random.randint(1, drug_count)
            cursor.execute('UPDATE users SET drug_count = ? WHERE id = ?', (drug_count - count, user_id,))
            conn.commit()
            await bot.send_message(-1001659076963, f"#FIND #LOSE\n\nfirst\_name: `{message.from_user.first_name}`\ncount: `{count}`\ndrug\_count: `{drug_count-count}`\n\n[mention](tg://user?id={user_id})", parse_mode='markdown')
            await message.reply(f"‚ùå *{message.from_user.first_name}*, —Ç–µ–±—è *—Å–ø–∞–ª–∏–ª –º–µ–Ω—Ç* –∏ *–¥–∞–ª —Ç–µ–±–µ –ø–æ –µ–±–∞–ª—É*\nüåø –¢–µ–±–µ –Ω—É–∂–Ω–æ –æ—Ç–∫—É–ø–∏—Ç—å—Å—è, –º–µ–Ω—Ç –ø—Ä–µ–¥–ª–æ–∂–∏–ª –≤–∑—è—Ç–∫—É –≤ —Ä–∞–∑–º–µ—Ä–µ `{count} –≥—Ä.`\n‚è≥ –°–ª–µ–¥—É—é—â–∞—è –ø–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ *12 —á–∞—Å–æ–≤.*", parse_mode='markdown')
            


@dp.message_handler(commands=['banuser'])
async def banuser_command(message: types.Message):
    user_id = message.from_user.id
    cursor.execute('SELECT * FROM users WHERE id = ?', (user_id,))
    user = cursor.fetchone()
    is_admin = user[3]
    if is_admin == 1:
        reply_msg = message.reply_to_message
        if reply_msg and reply_msg.from_user.id != message.from_user.id:
            bann_user_id = reply_msg.from_user.id
            cursor.execute('UPDATE users SET is_banned = 1 WHERE id = ?', (bann_user_id,))
            conn.commit()
        await message.reply(f"üõë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: `{bann_user_id}` –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", parse_mode='markdown')
    else:
        await message.reply('üö® MONKEY ALARM')

@dp.message_handler(commands=['unbanuser'])
async def unbanuser_command(message: types.Message):
    user_id = message.from_user.id
    cursor.execute('SELECT * FROM users WHERE id = ?', (user_id,))
    user = cursor.fetchone()
    is_admin = user[3]
    if is_admin == 1:
        reply_msg = message.reply_to_message
        if reply_msg and reply_msg.from_user.id != message.from_user.id:
            bann_user_id = reply_msg.from_user.id
            cursor.execute('UPDATE users SET is_banned = 0 WHERE id = ?', (bann_user_id,))
            conn.commit()
        await message.reply(f"üõë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: `{bann_user_id}` —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", parse_mode='markdown')
    else:
        await message.reply('üö® MONKEY ALARM')

@dp.message_handler(commands='about')
async def about_command(message: types.Message):
    keyboard = types.InlineKeyboardMarkup(resize_keyboard=True)
    channel_button = InlineKeyboardButton('üì¢ –ö–∞–Ω–∞–ª', url='https://t.me/mefmetrch')
    donate_button = InlineKeyboardButton('üí∞ –î–æ–Ω–∞—Ç', url='https://t.me/mefmetrch')
    chat_button = InlineKeyboardButton('üí¨ –ß–∞—Ç', url='https://t.me/mefmetrchat')
    keyboard.row(channel_button, donate_button, chat_button)
    await message.reply("üßë‚Äçüíª –ë–æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω @xanaxnotforfree –∏ @cl0wnl3ss.", reply_markup=keyboard)

@dp.message_handler(commands=['setdrugs'])
async def setdrugs_command(message: types.Message):
    user_id = message.from_user.id
    cursor.execute('SELECT * FROM users WHERE id = ?', (user_id,))
    user = cursor.fetchone()
    is_admin = user[3]
    if is_admin == 1:
        args = message.get_args().split(maxsplit=1)
        cursor.execute('UPDATE users SET drug_count = ? WHERE id = ?', (args[1],args[0]))
        conn.commit()
        await message.reply('‚úÖ')



if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)